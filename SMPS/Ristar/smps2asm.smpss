### RISTAR SMPS2ASM SCRIPT MADE BY NATSUMI 17/09/08
c ('\type\' != 'voice') && ('\type\' != 'sfx') && ('\type\' != '') && ('\type\' != 'music') {
	+Available types: Music, SFX, Voice
	$.cc
	;
}

=endian 'big'
=offset 0

c '\type\' == 'voice' {
	~£_Patches .of
	/ >patch
	;
}

c '\type\' == 'sfx' {
	/ >headersfx
} {
	/ >header
}

?header {
	! > sHeaderInit: {
		~£_Header .of
	}

	! > sHeaderPatch: .dw {
		~£_Patches :0
	}

	=FMnum .db
	=PSGnum .nb
	! > sHeaderCh: .lb, .db;
	! > sHeaderTempo: .db, .db;
	f 2 {
		! > sHeaderDAC: .dw {
			~£_DAC? :0
		}
		$ .sw
	}

	f \FMnum\ - 2 {
		! > sHeaderFM: .dw, .db, .db {
			~£_FM? :0
		}
	}

	f \PSGnum\ {
		! > sHeaderPSG: .dw, .db, .db, .db, .db {
			~£_PSG? :0
			:?4 {
				?volenv;
			}
		}
	}

	/£_FM? ?note ?comm
	/£_PSG? ?note ?comm
	/£_DAC ?DAC ?comm
	/£_Patches >patch
}

?headersfx {
	! > sHeaderInit: {
		~£_Header .of
	}

	! > sHeaderPatch: .dw {
		~£_Patches :0
	}

	! > sHeaderTick: .db;
	=CHnum .db
	! > sHeaderCh: \CHnum\;
	=trpd 0
	=trpn 0

	f \CHnum\ {
		>f 1
		=trpd .nb
		>b 1
		c (\trpd\ & 0x80) == 0 {
			=trpn (\trpd\&3)+1

			c (\trpd\ & 4) != 0 {
				=trpn \trpn\+3
			}

			! > sHeaderSFX: .db, .db, .dw, .db, .db {
				~£_FM\trpn\ :2
			}
		} {
			=trpn ((\trpd\&0x60)>>5)+1
			! > sHeaderSFX: .db, .db, .dw, .db, .db {
				~£_PSG\trpn\ :2
			}
		}

	}

	/£_FM? ?note ?comm
	/£_PSG? ?note ?comm
	/£_Patches >patch
}

?patch {
	=num 0
	=b1 0
	=b2 0
	=b3 0
	=b4 0
	f (.an-.pc)/25 {
		%\n\t; Patch {$2!\num\}\r\n\t; {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}
		>b 25
		! > spAlgorithm: .nb&0x7;
		! > spFeedback: (.db&0x38)>>3;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spDetune: (\b1\&0xF0)>>4, (\b2\&0xF0)>>4, (\b3\&0xF0)>>4, (\b4\&0xF0)>>4;
		! > spMultiple: \b1\&0xF, \b2\&0xF, \b3\&0xF, \b4\&0xF;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spRateScale: (\b1\&0xC0)>>6, (\b2\&0xC0)>>6, (\b3\&0xC0)>>6, (\b4\&0xC0)>>6;
		! > spAttackRt: \b1\&0x1F, \b2\&0x1F, \b3\&0x1F, \b4\&0x1F;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spAmpMod: (\b1\&0x80)>>7, (\b2\&0x80)>>7, (\b3\&0x80)>>7, (\b4\&0x80)>>7;
		! > spSustainRt: \b1\&0x1F, \b2\&0x1F, \b3\&0x1F, \b4\&0x1F;
		=d1 .db
		=d3 .db
		=d2 .db
		=d4 .db
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spSustainLv: (\b1\&0xF0)>>4, (\b2\&0xF0)>>4, (\b3\&0xF0)>>4, (\b4\&0xF0)>>4;
		! > spDecayRt: \d1\, \d2\, \d3\, \d4\;
		! > spReleaseRt: \b1\&0xF, \b2\&0xF, \b3\&0xF, \b4\&0xF;
		=b1 .db
		=b3 .db
		=b2 .db
		! > spTotalLv: \b1\&0x7F, \b2\&0x7F, \b3\&0x7F, .db&0x7F;
		=num \num\+1
	}

	c (.an-.pc)==1 {
		!0 > even:;
	}
}

?volenv {
	=v00 0
	=v01 1
	=v02 2
	=v03 3
	=v04 4
	=v05 5
	=v06 6
	=v07 7
	=v08 8
	=v09 9
	=v0A 0x0A
	=v0B 0x0B
	=v0C 0x0C
	=v0D 0x0D
	=v0E 0x0E
	=v0F 0x0F
	=v10 0x10
	=v11 0x11
	=v12 0x12
	=v13 0x13
	=v14 0x14
	=v15 0x15
	=v16 0x16
	=v17 0x17
	=v18 0x18
	=v19 0x19
	=v1A 0x1A
	=v1B 0x1B
	=v1C 0x1C
	=v1D 0x1D
	=v1E 0x1E
}

?modenv {
	=m00 0
	=m01 1
	=m02 2
	=m03 3
	=m04 4
	=m05 5
	=m06 6
	=m07 7
	=m08 8
}

?DAC {
	=nRst 0x80
	=d81 0x81
	=d82 0x82
	=d83 0x83
	=d84 0x84
	=d85 0x85
	=d86 0x86
	=d87 0x87
	=d88 0x88
	=d89 0x89
	=d8A 0x8A
	=d8B 0x8B
	=d8C 0x8C
	=d8D 0x8D
	=d8E 0x8E
	=d8F 0x8F
	=d90 0x90
	=d91 0x91
	=d92 0x92
	=d93 0x93
	=d94 0x94
	=d95 0x95
	=d96 0x96
	=d97 0x97
	=d98 0x98
	=d99 0x99
	=d9A 0x9A
	=d9B 0x9B
	=d9C 0x9C
	=d9D 0x9D
	=d9E 0x9E
	=d9F 0x9F
	=dA0 0xA0
	=dA1 0xA1
	=dA2 0xA2
	=dA3 0xA3
	=dA4 0xA4
	=dA5 0xA5
	=dA6 0xA6
	=dA7 0xA7
	=dA8 0xA8
	=dA9 0xA9
	=dAA 0xAA
	=dAB 0xAB
	=dAC 0xAC
	=dAD 0xAD
	=dAE 0xAE
	=dAF 0xAF
	=dB0 0xB0
	=dB1 0xB1
	=dB2 0xB2
	=dB3 0xB3
	=dB4 0xB4
	=dB5 0xB5
	=dB6 0xB6
	=dB7 0xB7
	=dB8 0xB8
	=dB9 0xB9
	=dBA 0xBA
	=dBB 0xBB
	=dBC 0xBC
	=dBD 0xBD
	=dBE 0xBE
	=dBF 0xBF
	=dC0 0xC0
	=dC1 0xC1
}

	sinc "..\SMPS\SMPS default notes.smpss"

?comm {
	!0xE0 > sPan: .db & 0xC0, .lb & 0x3F {
		:?0 {
			=spNone 0x00
			=spRight 0x40
			=spLeft 0x80
			=spCenter 0xC0
		}

		c .n1 == 0 {
			:-1
		}
	}
	!0xE1 > ssDetune: .db;
	!0xE2 > sComm: .db;
	!0xE3 > sStopFM: {
		;
	}
	!0xE4, 0 > sPanAni:;
	!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;
	!0xE5 > saVolFMP: .db, .db;
	!0xE6 > saVolFM: .db;
	=sHold 0xE7
	!0xE8 > sNoteTimeOut: .db;
	!0xE9 > ssLFO: .db, .db;
	!0xEA > ssTempo: .db;
	!0xEB > sPlaySound: .db;
	!0xEC > saVolPSG: .db;
	!0xED > sYMcmd: .db, .db;
	!0xEE > sYM1cmd: .db, .db;
	!0xEF > sPatFM: .db;
	!0xF0 > ssMod68k: .db, .db, .db, .db;
	!0xF1 > sModEnv: .db, .db {
		:?0 {
			?modenv;
		}
		:?1 {
			?modenv;
		}
	}
	!0xF2 > sStop:{
		;
	}
	!0xF3 > sNoisePSG: .db;
	!0xF4 > sModEnv: .db {
		:?0 {
			?modenv;
		}
	}
	!0xF5 > sVolEnvPSG: .db {
		:?0 {
			?volenv;
		}
	}
	!0xF6 > sJump: .rw {
		~£_Jump? :0
		;
	}
	!0xF7 > sLoop: .db, .db, .rw {
		~£_Loop? :2
	}
	!0xF8 > sCall: .rw {
		~£_Call? :0
	}
	!0xF9 > sRet:{
		;
	}
	!0xFA > ssTickMulCh: .db;
	!0xFB > saTranspose: .db;
	!0xFC > sModOn:;
	!0xFD > sModOff:;
	!0xFE > sSpecFM3: .db, .db, .db, .db;
	!0xFF, 0 > sSSGEG: .db, .db, .db, .db {
		=op2 .a2
		:=2 .a1
		:=1 \op2\
	}
	!0xFF, 1 > sMusPause: .db;
	!0xFF, 2 > ssTickMul: .db;
	!0xFF, 3 > sFadeSPC: .db, .db;
	!0xFF, 4 > sFadeSPC:;
	!0xFF, 5 > sFM4freq: .db;
	!0xFF, 6 > sNoteTimeIn: .db;
	!0xFF, 7 > sCondJmp: .rw {
		~£_Cond? :0
	}
	!0xFF, 8 > ssPalTempo: .db;
	!0xFF, 9 > ssPalNoteDur: .db;
}
