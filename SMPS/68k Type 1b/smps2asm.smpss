### 68K TYPE 1B GENERIC SMPS2ASM SCRIPT MADE BY NATSUMI 18/08/25

# check for valid script parse type
c ('\type\' != 'voice') && ('\type\' != 'sfx') && ('\type\' != '') && ('\type\' != 'music') {
	+Available types: Music, SFX, Voice
	# wait for user to press a key before exit
	$.cc
	;
}

# set necessary parse variables
=endian 'big'
=offset 0

# if this is a voice, just go straight to parsing them
c '\type\' == 'voice' {
	~£_Patches .of
	/ >patch
	;
}

# determine parse routine
c '\type\' == 'sfx' {
	/ >headersfx
} {
	/ >header
}

?header {
	# this line will initialize SMPS2ASM assembly
	! > sHeaderInit: {
		~£_Header .of
	}

	# pointer to voice table
	! > sHeaderPatch: .dw {
		~£_Patches :0
	}

	# load number of channels into variables
	=FMnum .db
	=PSGnum .nb
	! > sHeaderCh: .lb, .db;

	# prepare tempo and DAC header
	! > sHeaderTempo: .db, .db;
	! > sHeaderDAC: .dw {
		~£_DAC :0
	}

	$ .sw

	# process each FM channel
	f \FMnum\ - 1 {
		! > sHeaderFM: .dw, .db, .db {
			~£_FM? :0
		}
	}

	# process each PSG channel
	f \PSGnum\ {
		! > sHeaderPSG: .dw, .db, .db, .db, .db {
			~£_PSG? :0
			:?4 {
				?volenv;
			}
		}
	}

	# disassemble all smps data
	/£_FM? ?note ?comm
	/£_PSG? ?note ?comm
	/£_DAC ?DAC ?comm
	/£_Patches >patch
}

?headersfx {
	# this line will initialize SMPS2ASM assembly
	! > sHeaderInit: {
		~£_Header .of
	}

	# pointer to voice table
	! > sHeaderPatch: .dw {
		~£_Patches :0
	}

	# load tick count and channel count
	! > sHeaderTick: .db;
	=CHnum .db
	! > sHeaderCh: \CHnum\;
	=trpd 0
	=trpn 0

	# repeat this monstrocity for each channel
	f \CHnum\ {
		# load the channel type parameter
		>f 1
		=trpd .nb
		>b 1

		# check if FM or PSG channel
		c (\trpd\ & 0x80) == 0 {
			=trpn (\trpd\&3)+1

			# if this is a part 2 channel, we need special calculation
			c (\trpd\ & 4) != 0 {
				=trpn \trpn\+3
			}

			# initialize FM channel
			! > sHeaderSFX: .db, .db, .dw, .db, .db {
				~£_FM\trpn\ :2
			}

		} {
			# initialize PSG channel
			=trpn ((\trpd\&0x60)>>5)+1
			! > sHeaderSFX: .db, .db, .dw, .db, .db {
				~£_PSG\trpn\ :2
			}
		}

	}

	# disassemble all smps data
	/£_FM? ?note ?comm
	/£_PSG? ?note ?comm
	/£_Patches >patch
}

?patch {
	# reset variables
	=num 0
	=b1 0
	=b2 0
	=b3 0
	=b4 0

	# repeat until the next lable (this may disassemble too much data!)
	f (.an-.pc)/25 {
		# prepare the comment describing the voice
		%\n\t; Patch {$2!\num\}\r\n\t; {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}
		# fix the cursor position
		>b 25

		# this long ass code just disassembles each part of the voice into correct macros
		! > spAlgorithm: .nb&0x7;
		! > spFeedback: (.db&0x38)>>3;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spDetune: (\b1\&0xF0)>>4, (\b2\&0xF0)>>4, (\b3\&0xF0)>>4, (\b4\&0xF0)>>4;
		! > spMultiple: \b1\&0xF, \b2\&0xF, \b3\&0xF, \b4\&0xF;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spRateScale: (\b1\&0xC0)>>6, (\b2\&0xC0)>>6, (\b3\&0xC0)>>6, (\b4\&0xC0)>>6;
		! > spAttackRt: \b1\&0x1F, \b2\&0x1F, \b3\&0x1F, \b4\&0x1F;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spAmpMod: (\b1\&0x80)>>7, (\b2\&0x80)>>7, (\b3\&0x80)>>7, (\b4\&0x80)>>7;
		! > spSustainRt: \b1\&0x1F, \b2\&0x1F, \b3\&0x1F, \b4\&0x1F;
		=d1 .db
		=d3 .db
		=d2 .db
		=d4 .db
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spSustainLv: (\b1\&0xF0)>>4, (\b2\&0xF0)>>4, (\b3\&0xF0)>>4, (\b4\&0xF0)>>4;
		! > spDecayRt: \d1\, \d2\, \d3\, \d4\;
		! > spReleaseRt: \b1\&0xF, \b2\&0xF, \b3\&0xF, \b4\&0xF;
		=b1 .db
		=b3 .db
		=b2 .db
		! > spTotalLv: \b1\&0x7F, \b2\&0x7F, \b3\&0x7F, .db&0x7F;
		=num \num\+1
	}

	# check if there is still 1 byte left
	c (.an-.pc)==1 {
		# if next byte is 0, then use the assembler macro 'even'!
		!0 > even:;
	}
}

	# include bunch of important files
	sinc "..\SMPS\SMPS full VolEnv set.smpss"
	sinc "..\SMPS\SMPS full DAC set.smpss"
	sinc "..\SMPS\SMPS default notes.smpss"

?comm {
	# PANAFMS 	PAFMS_PAN
	!0xE0 > sPan: .db & 0xC0, .lb & 0x3F {
		# first argument is one of the following
		:?0 {
			=spNone 0x00
			=spRight 0x40
			=spLeft 0x80
			=spCenter 0xC0
		}

		# if the second argument would be 0, delete it
		c .n1 == 0 {
			:-1
		}
	}

	# DETUNE
	!0xE1 > ssDetune: .db;

	# SET_COMM
	!0xE2 > sComm: .db;

	# TRK_END 	TEND_MUTE
	!0xE3 > sMuteStopFM:{
		;
	}

	# PAN_ANIM
	# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
	!0xE4, 0 > sPanAni:;
	!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;

	# VOLUME  	VOL_NN_FMP
	!0xE5 > saVolFM: .db, .db;

	# VOLUME  	VOL_NN_FM
	!0xE6 > saVolFM: .db;

	# HOLD
	# hold is a special flag, which is not used like a macro, but embedded into the note data!
	=sHold 0xE7

	# NOTE_STOP	NSTOP_NORMAL
	!0xE8 > sNoteTimeOut: .db;

	# SET_LFO 	LFO_AMSEN
	!0xE9 > ssLFO: .db, .db;

	# TEMPO   	TEMPO_ADD
	!0xEA > ssTempo: .db;

	# SND_CMD
	!0xEB > sPlaySound: .db;

	# VOLUME  	VOL_NN_PSG
	!0xEC > saVolPSG: .db;

	# FM_COMMAND	FMW_CHN
	!0xED > sYMcmd: .db, .db;

	# FM_COMMAND	FMW_FM1
	!0xEE > sYM1cmd: .db, .db;

	# INSTRUMENT	INS_N_FM
	!0xEF > sPatFM: .db;

	# MOD_SETUP
	!0xF0 > ssMod68k: .db, .db, .db, .db;

	# MOD_SET 	MODS_ON
	!0xF1 > sModOn:;

	# TRK_END 	TEND_STD
	!0xF2 > sStop:{
		;
	}

	# PSG_NOISE	PNOIS_SET
	!0xF3 > sNoisePSG: .db;

	# MOD_SET 	MODS_OFF
	!0xF4 > sModOff:;

	# INSTRUMENT	INS_N_PSG
	!0xF5 > sVolEnvPSG: .db {
		:?0 {
			?volenv;
		}
	}

	# GOTO
	!0xF6 > sJump: .ow {
		~£_Jump? :0
		;
	}

	# LOOP
	!0xF7 > sLoop: .db, .db, .ow {
		~£_Loop? :2
	}

	# GOSUB
	!0xF8 > sCall: .ow {
		~£_Call? :0
	}

	# RETURN
	!0xF9 > sRet:{
		;
	}

	# TICK_MULT	TMULT_CUR
	!0xFA > ssTickMulCh: .db;

	# TRANSPOSE	TRNSP_ADD
	!0xFB > saTranspose: .db;

	# TICK_MULT	TMULT_ALL
	!0xFC > ssTickMul: .db;

	# IGNORE
	#!0xFD > <unknown>: .db;

	# SPC_FM3
	!0xFE > sSpecFM3: .db, .db, .db, .db;

	# MUS_PAUSE	MUSP_68K	[META]
	!0xFF, 0 > sMusPause: .db;

	# SSG_EG  	SEG_FULLATK	[META]
	!0xFF, 1 > sSSGEG: .db, .db, .db, .db {
		# swap op2 and op3
		=op2 .a2
		:=2 .a1
		:=1 \op2\
	}
}
