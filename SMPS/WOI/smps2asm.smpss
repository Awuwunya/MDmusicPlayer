### WORLD OF ILLUSION SMPS2ASM SCRIPT MADE BY NATSUMI 17/09/09
sversion v1_1
sdatamacro dc.b

c ('\type\' != 'voice') && ('\type\' != 'sfx') && ('\type\' != '') && ('\type\' != 'music') {
	+Available types: Music, SFX, Voice
	$.cc
	;
}

=endian 'little'

c '\type\' == 'voice' {
	=offset 0
	~£_Patches .of
	/ >patch
	;
}

@offset 0 "Please specify offset of this song in Z80 bank"

c '\type\' == 'sfx' {
	/ >headersfx
} {
	/ >header
}

?header {
	! > sHeaderInit: {
		~£_Header .of
		%; Z80 offset is {$4!\offset\}
	}

	! > sHeaderPatch: .dw {
		~£_Patches :0
	}

	=FMnum .db
	=PSGnum .nb
	! > sHeaderCh: .lb, .db;
	! > sHeaderTempo: .db, .db;
	! > sHeaderDAC: .dw {
		~£_DAC :0
	}

	$ .sw
	f \FMnum\ - 1 {
		! > sHeaderFM: .dw, .db, .db {
			~£_FM? :0
		}
	}

	f \PSGnum\ {
		! > sHeaderPSG: .dw, .db, .db, .db, .db {
			~£_PSG? :0
			:?4 {
				?volenv;
			}
		}
	}

	/£_FM? ?note ?comm
	/£_PSG? ?note ?comm
	/£_DAC ?DAC ?comm
	/£_Patches >patch
}

?headersfx {
	! > sHeaderInit: {
		~£_Header .of
		%; Z80 offset is {$4!\offset\}
	}
	! > sHeaderPatch: .dw {
		~£_Patches :0
	}

	! > sHeaderTick: .db;
	=CHnum .db
	! > sHeaderCh: \CHnum\;
	=trpd 0
	=trpn 0

	f \CHnum\ {
		>f 1
		=trpd .nb
		>b 1
		c (\trpd\ & 0x80) == 0 {
			=trpn (\trpd\&3)+1

			c (\trpd\ & 4) != 0 {
				=trpn \trpn\+3
			}

			! > sHeaderSFX: .db, .db, .dw, .db, .db {
				~£_FM\trpn\ :2
			}

		} {
			=trpn ((\trpd\&0x60)>>5)+1
			! > sHeaderSFX: .db, .db, .dw, .db, .db {
				~£_PSG\trpn\ :2
			}
		}

	}

	/£_FM? ?note ?comm
	/£_PSG? ?note ?comm
	/£_Patches >patch
}

?patch {
	=num 0
	=b1 0
	=b2 0
	=b3 0
	=b4 0
	f (.an-.pc)/25 {
		%\n\t; Patch {$2!\num\}\r\n\t; {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}\r\n\t; {$2!.db}, {$2!.db}, {$2!.db}, {$2!.db},\t{$2!.db}, {$2!.db}, {$2!.db}, {$2!.db}
		>b 25
		! > spAlgorithm: .nb&0x7;
		! > spFeedback: (.db&0x38)>>3;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spDetune: (\b1\&0xF0)>>4, (\b2\&0xF0)>>4, (\b3\&0xF0)>>4, (\b4\&0xF0)>>4;
		! > spMultiple: \b1\&0xF, \b2\&0xF, \b3\&0xF, \b4\&0xF;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spRateScale: (\b1\&0xC0)>>6, (\b2\&0xC0)>>6, (\b3\&0xC0)>>6, (\b4\&0xC0)>>6;
		! > spAttackRt: \b1\&0x1F, \b2\&0x1F, \b3\&0x1F, \b4\&0x1F;
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spAmpMod: (\b1\&0x80)>>7, (\b2\&0x80)>>7, (\b3\&0x80)>>7, (\b4\&0x80)>>7;
		! > spSustainRt: \b1\&0x1F, \b2\&0x1F, \b3\&0x1F, \b4\&0x1F;
		=d1 .db
		=d3 .db
		=d2 .db
		=d4 .db
		=b1 .db
		=b3 .db
		=b2 .db
		=b4 .db
		! > spSustainLv: (\b1\&0xF0)>>4, (\b2\&0xF0)>>4, (\b3\&0xF0)>>4, (\b4\&0xF0)>>4;
		! > spDecayRt: \d1\, \d2\, \d3\, \d4\;
		! > spReleaseRt: \b1\&0xF, \b2\&0xF, \b3\&0xF, \b4\&0xF;
		=b1 .db
		=b3 .db
		=b2 .db
		! > spTotalLv: \b1\&0x7F, \b2\&0x7F, \b3\&0x7F, .db&0x7F;
		=num \num\+1
	}
}

# this subscript will use an index of look-up values. You know, for some speed bonus!
?volenv {
	=v00 0
	=v01 1
	=v02 2
	=v03 3
	=v04 4
	=v05 5
	=v06 6
	=v07 7
	=v08 8
	=v09 9
	=v0A 0x0A
	=v0B 0x0B
	=v0C 0x0C
	=v0D 0x0D
	=v0E 0x0E
	=v0F 0x0F
	=v10 0x10
	=v11 0x11
	=v12 0x12
	=v13 0x13
	=v14 0x14
	=v15 0x15
	=v16 0x16
	=v17 0x17
}

?modenv {
	=m00 0
}

?DAC {
	=nRst 0x80
}

?note {
	=nRst 0x80
	=nC0 0x81
	=nCs0 0x82
	=nD0 0x83
	=nEb0 0x84
	=nE0 0x85
	=nF0 0x86
	=nFs0 0x87
	=nG0 0x88
	=nAb0 0x89
	=nA0 0x8A
	=nBb0 0x8B
	=nB0 0x8C
	=nC1 0x8D
	=nCs1 0x8E
	=nD1 0x8F
	=nEb1 0x90
	=nE1 0x91
	=nF1 0x92
	=nFs1 0x93
	=nG1 0x94
	=nAb1 0x95
	=nA1 0x96
	=nBb1 0x97
	=nB1 0x98
	=nC2 0x99
	=nCs2 0x9A
	=nD2 0x9B
	=nEb2 0x9C
	=nE2 0x9D
	=nF2 0x9E
	=nFs2 0x9F
	=nG2 0xA0
	=nAb2 0xA1
	=nA2 0xA2
	=nBb2 0xA3
	=nB2 0xA4
	=nC3 0xA5
	=nCs3 0xA6
	=nD3 0xA7
	=nEb3 0xA8
	=nE3 0xA9
	=nF3 0xAA
	=nFs3 0xAB
	=nG3 0xAC
	=nAb3 0xAD
	=nA3 0xAE
	=nBb3 0xAF
	=nB3 0xB0
	=nC4 0xB1
	=nCs4 0xB2
	=nD4 0xB3
	=nEb4 0xB4
	=nE4 0xB5
	=nF4 0xB6
	=nFs4 0xB7
	=nG4 0xB8
	=nAb4 0xB9
	=nA4 0xBA
	=nBb4 0xBB
	=nB4 0xBC
	=nC5 0xBD
	=nCs5 0xBE
	=nD5 0xBF
	=nEb5 0xC0
	=nE5 0xC1
	=nF5 0xC2
	=nFs5 0xC3
	=nG5 0xC4
	=nAb5 0xC5
	=nA5 0xC6
	=nBb5 0xC7
	=nB5 0xC8
	=nC6 0xC9
	=nCs6 0xCA
	=nD6 0xCB
	=nEb6 0xCC
	=nE6 0xCD
	=nF6 0xCE
	=nFs6 0xCF
}

?comm {
	!0xD0-0xDF > ssVolQuick: .lb&0xF;
	!0xE0 > sPan: .db & 0xC0, .lb & 0x3F {
		:?0 {
			=spNone 0x00
			=spRight 0x40
			=spLeft 0x80
			=spCenter 0xC0
		}

		c .n1 == 0 {
			:-1
		}
	}
	!0xE1 > ssDetune: .db;
	!0xE2 > sComm: .db;
	!0xE3 > sMuteStopFM:;
	!0xE4 > sLoopExitWOI: .dw {
		~£_JpCond? :0
		;
	}
	!0xE5 > ssVolBase: .db;
	!0xE6 > saVolFM: .db;
	=sHold 0xE7
	!0xE8 > sNoteTimeOut: .db;
	!0xE9 > ssLFO: .db, .db;
	!0xEA > sPlayDAC: .db | 0x80;
	!0xEB > sLoopExit: .db, .dw {
		~£_LpExit? :1
	}
	!0xEC > saVolPSG: .db;
	!0xED > ssTempo: .db;
	!0xEE > ssTickMul: .db;
	!0xEF > sPatFM: .db;
	!0xF0 > ssModZ80: .db, .db, .db, .db;
	!0xF1 > saTranspWOI: .db;
	!0xF2 > sStop:{
		;
	}
	!0xF3 > sNoisePSG: .db;
	!0xF4, 0x80 > sModOn:;
	!0xF4 > sModEnv: .db {
		:?0 {
			?modenv;
		}
	}
	!0xF5 > sVolEnvPSG: .db {
		:?0 {
			?volenv;
		}
	}
	!0xF6 > sJump: .dw {
		~£_Jump? :0
		;
	}
	!0xF7 > sLoop: .db, .db, .dw {
		~£_Loop? :2
	}
	!0xF8 > sCall: .dw {
		~£_Call? :0
	}
	!0xF9 > sRet: {
		;
	}
	!0xFA > ssTickMulCh: .db;
	!0xFB > saTranspose: .db;
	!0xFC > sPitchSlide: .db;
	!0xFD > sRawFreq: .db;
	!0xFE > sSpecFM3: .db, .db, .db, .db;
	!0xFF > ssVolWOI: .lb&0xF;
}
