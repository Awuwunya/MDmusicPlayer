================================================================================
MDMusicPlayer documentation
================================================================================
This documentation details the usage for MDMusicPlayer made by Natsumi.

Contents:
    * 1 - Introduction
    * 2 - Music
    * 3 - Sound drivers
    * 4 - Whats in where
    * 5 - Credits
================================================================================

*1 - Introduction*
  MDMusicPlayer is an application which allows you to test any Mega Drive SMPS
  or non-SMPS music in a single package. It supports up to 64 sound drivers, and
  theoretically up to 16383 different music files. It is also fully open source
  and contains few tools for easier development of sound drivers and/or SMPS
  music. The support for non-SMPS music is not verified as of yet, however it
  should still work just fine provided certain modifications are done. See
  chapter 3 for more details.
================================================================================

*2 - Music*
  MDMusicPlayer accepts two types of music; binary and SMPS2ASM format music.
  However, any music that relies on absolute pointers (most often music used
  with a Z80 sound driver) can not be guaranteed to work when they are in binary
  format. This music should be converted to ASM using the provided SMPS2ASM
  converter. Here is a simple guide for adding more music;
    * 1 - Copy the music you want to play to the 'music' folder.
    * 2 - If you want or need to, use SMPS2ASM to convert the music to ASM
      format. See 'SMPS2ASM.txt' for detailed instructions on how to use
      SMPS2ASM.
    * 3 - Open music.asm on the root folder, and create a new music entry for
      the file.
    * 4 - Ensure you fill in the details correctly (driver id, music format
      and driver type)
    * 5 - Click on 'build.bat' on the root folder and launch 'player.md' on
      your favourite emulator or on hardware!
    * 6 - If music files that are on z80 sound driver do not work, try to add
      'bank' on a separate line before this music file. Chances are it was too
      large to fit in the earlier bank!
================================================================================

*3 - Sound driver*
  There are 4 SMPS sound drivers installed for you by default; Sonic 3 &
  Knuckles Z80 sound driver, Mega PCM DAC driver (including Sonic 1 68k
  driver), Dynamite Headdy 68k sound driver and Z80 DAC driver, and Ristar 68k
  sound driver. Additionally, there are are 4 GEMS sound files installed:
  Aladdin, Sonic Spinball, and Vectorman. You can add yourself more sound
  drivers as well,  provided you can disassemble them, and add appropriate code
  and data. Sound driver code need to be able to fit in 0x8000 bytes, and they
  can use additional 0x2000 bytes if they do not require code to be ran on
  horizontal blanking. Else they may only use 0x1C00 bytes for memory. Each 68k
  sound driver will be ran from RAM, at address 0xFF0000 and their RAM section
  should be at 0xFF8000.
  You can include the file 'code/macro.asm' for helpful macros and equates of
  these addresses. Each sound driver also has to have few additional files
  helping the system to run the music files properly. 'load.asm' is used after
  loading the sound driver, and it can be used to set variables, or for example
  construct Z80 banks and overwrite Z80 RAM with them. 'play.asm' is used when
  user requests to play a music file. The pointer to said file is given at d7.
  'update.asm' is used each frame during vertical blanking to update various
  information about the sound driver, including active channels, notes and DAC
  samples being played, etc. 'smps2asm (ASM68K).asm' is used to set the macros
  and equates for that particular sound driver. This is not required if you do
  not use ASM format music files. 'smps2asm.smpss' is the script for SMPS2ASM
  to convert ASM files, and is neither required. You can read more about it in
  SMPS2ASM.txt. '68k.asm' and 'z80.asm' are used to assemble the respective
  sound drivers with. Both files are required even if only one processor is
  used. 'drv.68k' and 'drv.z80' are the built and compressed versions of these
  sound drivers. 'build.bat' is used to build both sound drivers at once. To
  include additional driver, open 'drv.asm' in the root folder, add new line
  under pre-existing 'incdrv' macros, put the driver folder, driver type and
  compression in. You can refer to the new driver with its folder name. The
  folder may not contain whitespaces, special characters and can not start with
  a number.
================================================================================

*4 - Whats in where*
  There are quite large amount of different files in MDMusicPlayer. So here I
  list all of the files (excluding driver specific files) and tell their
  purpose.
    *ASMfile equ.asm - This file defines the equates used in creating ASM music
      only file (ASM -> BIN conversion). These are the values you enter to the
      commandline.

    *ASMfile.asm - This is the main script which makes the ASM to BIN conversion
      happen.

    *build SMPS ASM file.bat - Simply is a commandline wrapper over the building
      process

    *build.bat - Assembles 'player.md'. Starts from 'code/main.asm'.

    *code/chaninfo.asm - This contains the code necessary to update the channel
      information when playing a music file.

    *code/decompressors.asm - This contains all the compression methods used by
      the application. Contains Kosinski, Comper, Nemesis and Enigma compression
      routines.

    *code/drivers.asm - Contains code for loading sound drivers, inclusion of
      pre-generated music files, code to initialize decompression, handling
      of loading and updating music player, and stopping sound when stop sfx is
      played.

    *drv.asm - Contains the installed sound drivers, and special macro used
      when pre-generating music files.

    *code/init.asm - Contains code for initializing Sega Mega Drive, and the
      player itself.

    *code/main.asm - Contains the header, and includes all necessary files.

    *music.asm - A list of all the music files to be used by MusicTool.

    *code/program.asm - Contains the main loop of the program, checks for
      errors, handles controlling the program, and starting music playback.

    *code/string.asm - Contains functions used to write different strings
      onscreen, and displaying numbers of varying sizes.

    *code/VBlank.asm - Has the code ran during vertical blanking, reads
      controllers and calls the 68k sound driver. Responsible to dealing with
      DMA's and various other functions.

    *code/font.unc - Raw uncompressed font used in the program. Thanks Bakayote!

    *code/font.kos - Kosinski compressed version of font.unc.

    *code/macro.asm - Contains all kinds of supporting macros as well as equates
      that are necessary for the correct functionality of the program.

    *code/LANG Z80.ASM - Contains Natsumi's Z80 macro assembler for Z80 ASM
      code. Used to assemble some sound drivers.

    *code/main.pal - Palette the program uses.

    *code/ErrorHandler.bin - Vladikcomper's error handler code blob. Is
      responsible for displaying error messages if problems occur.

    *bin/ConvSym.exe - Tool used to convert symbol file to a format used by
      Vladikcompers error debugger, for easier debugging process.

    *bin/asm68k.exe - Used to assemble 68000 assembly code, including sound
      drivers and the player itself.

    *bin/changelog.txt - Tells you which version we are on and what has
      changed. You can also get links to past versions easily.

    *bin/MDMusicPlayer.txt - This document.

    *bin/NCalc.dll - Used by SMPS2ASM to help evaluating different things.

    *bin/smps2asm.exe - Main SMPS2ASMv2/Nat executable, used to translate binary
      music files into ASM format.

    *bin/smps2asm.txt - Document describing SMPS2ASMv2/Nat in detail.

    *bin/gems2asm.exe - Similar to SMPS2ASM, but used to translate GEMS music to
      ASM format.

    *bin/MusicTool.exe - Tool used to assemble all music data to easily put into
      the output ROM.

    *bin/vasmZ80.exe - Z80 assembler used by some Z80 sound drivers and Z80 DAC
      drivers to assemble the source code.

    *_temp/.68k - File used for assembling a single SMPS music file.

    *_temp/.bin - Output of music file assembly.

    *_temp/.lst - Listings file for music file assembly.

    *_temp/music - All pre-generated music files.

    *_temp/offs - Pointers for pre-generated music files.
================================================================================

*5 - Credits*
  Of course, I couldn't do all of this myself. A few people helped me along the
  way to make all of this possible!
    *ValleyBell - His SMPS and GEMS research packs and direct help has helped me
      to understand SMPS and GEMS format a lot more as well as implement all
      these sound driver to go with my tool. Huge thanks for him, and if it
      weren't for him this may have not ever come to light. He also helped me
      revise the SMPS ASM format.

    *Bakayote - He provided me the great font used in this tool. If it weren't
      for him I'd have to use the awful Sonic 1 menu font, and have to improvise
      to add the missing ASCII characters. But thanks to him we have a nice
      looking font with almost all ASCII characters.

    *Oerg866 - He was the original inspiration to do this. I felt his SMPS
      Player missed some key features I would have liked to see, and also
      upon further examination was coded terribly badly. So I thought to
      make something a lot more usable.

    *Vladikcomper - Creator of MegaPCM and the Error debugger used in this
      project!
